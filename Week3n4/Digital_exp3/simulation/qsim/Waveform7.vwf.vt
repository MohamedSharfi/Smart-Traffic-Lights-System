// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/17/2023 16:13:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg se1;
reg sw2;
reg tco;
// wires                                               
wire LEA;
wire LNF;
wire LNL;
wire LNR;
wire LSF;
wire LSL;
wire LSR;
wire LWA;
wire s0;
wire s1;
wire s2;
wire s3;

// assign statements (if any)                          
traffic_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.LEA(LEA),
	.LNF(LNF),
	.LNL(LNL),
	.LNR(LNR),
	.LSF(LSF),
	.LSL(LSL),
	.LSR(LSR),
	.LWA(LWA),
	.reset(reset),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.se1(se1),
	.sw2(sw2),
	.tco(tco)
);
initial 
begin 
#1000000 $finish;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

