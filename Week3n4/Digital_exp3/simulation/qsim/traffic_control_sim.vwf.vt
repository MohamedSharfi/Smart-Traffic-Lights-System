// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2023 15:37:56"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    traffic_control
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module traffic_control_vlg_sample_tst(
	clk,
	reset,
	se1,
	sw2,
	tco,
	sampler_tx
);
input  clk;
input  reset;
input  se1;
input  sw2;
input  tco;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or se1 or sw2 or tco)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module traffic_control_vlg_check_tst (
	LEA,
	LNF,
	LNL,
	LNR,
	LSF,
	LSL,
	LSR,
	LWA,
	s,
	sampler_rx
);
input  LEA;
input  LNF;
input  LNL;
input  LNR;
input  LSF;
input  LSL;
input  LSR;
input  LWA;
input [3:0] s;
input sampler_rx;

reg  LEA_expected;
reg  LNF_expected;
reg  LNL_expected;
reg  LNR_expected;
reg  LSF_expected;
reg  LSL_expected;
reg  LSR_expected;
reg  LWA_expected;
reg [3:0] s_expected;

reg  LEA_prev;
reg  LNF_prev;
reg  LNL_prev;
reg  LNR_prev;
reg  LSF_prev;
reg  LSL_prev;
reg  LSR_prev;
reg  LWA_prev;
reg [3:0] s_prev;

reg  LEA_expected_prev;
reg  LNF_expected_prev;
reg  LNL_expected_prev;
reg  LNR_expected_prev;
reg  LSF_expected_prev;
reg  LSL_expected_prev;
reg  LSR_expected_prev;
reg  LWA_expected_prev;
reg [3:0] s_expected_prev;

reg  last_LEA_exp;
reg  last_LNF_exp;
reg  last_LNL_exp;
reg  last_LNR_exp;
reg  last_LSF_exp;
reg  last_LSL_exp;
reg  last_LSR_exp;
reg  last_LWA_exp;
reg [3:0] last_s_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	LEA_prev = LEA;
	LNF_prev = LNF;
	LNL_prev = LNL;
	LNR_prev = LNR;
	LSF_prev = LSF;
	LSL_prev = LSL;
	LSR_prev = LSR;
	LWA_prev = LWA;
	s_prev = s;
end

// update expected /o prevs

always @(trigger)
begin
	LEA_expected_prev = LEA_expected;
	LNF_expected_prev = LNF_expected;
	LNL_expected_prev = LNL_expected;
	LNR_expected_prev = LNR_expected;
	LSF_expected_prev = LSF_expected;
	LSL_expected_prev = LSL_expected;
	LSR_expected_prev = LSR_expected;
	LWA_expected_prev = LWA_expected;
	s_expected_prev = s_expected;
end



// expected LEA
initial
begin
	LEA_expected = 1'bX;
end 

// expected LNF
initial
begin
	LNF_expected = 1'bX;
end 

// expected LNL
initial
begin
	LNL_expected = 1'bX;
end 

// expected LNR
initial
begin
	LNR_expected = 1'bX;
end 

// expected LSF
initial
begin
	LSF_expected = 1'bX;
end 

// expected LSL
initial
begin
	LSL_expected = 1'bX;
end 

// expected LSR
initial
begin
	LSR_expected = 1'bX;
end 

// expected LWA
initial
begin
	LWA_expected = 1'bX;
end 
// expected s[ 3 ]
initial
begin
	s_expected[3] = 1'bX;
end 
// expected s[ 2 ]
initial
begin
	s_expected[2] = 1'bX;
end 
// expected s[ 1 ]
initial
begin
	s_expected[1] = 1'bX;
end 
// expected s[ 0 ]
initial
begin
	s_expected[0] = 1'bX;
end 
// generate trigger
always @(LEA_expected or LEA or LNF_expected or LNF or LNL_expected or LNL or LNR_expected or LNR or LSF_expected or LSF or LSL_expected or LSL or LSR_expected or LSR or LWA_expected or LWA or s_expected or s)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected LEA = %b | expected LNF = %b | expected LNL = %b | expected LNR = %b | expected LSF = %b | expected LSL = %b | expected LSR = %b | expected LWA = %b | expected s = %b | ",LEA_expected_prev,LNF_expected_prev,LNL_expected_prev,LNR_expected_prev,LSF_expected_prev,LSL_expected_prev,LSR_expected_prev,LWA_expected_prev,s_expected_prev);
	$display("| real LEA = %b | real LNF = %b | real LNL = %b | real LNR = %b | real LSF = %b | real LSL = %b | real LSR = %b | real LWA = %b | real s = %b | ",LEA_prev,LNF_prev,LNL_prev,LNR_prev,LSF_prev,LSL_prev,LSR_prev,LWA_prev,s_prev);
`endif
	if (
		( LEA_expected_prev !== 1'bx ) && ( LEA_prev !== LEA_expected_prev )
		&& ((LEA_expected_prev !== last_LEA_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEA_expected_prev);
		$display ("     Real value = %b", LEA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_LEA_exp = LEA_expected_prev;
	end
	if (
		( LNF_expected_prev !== 1'bx ) && ( LNF_prev !== LNF_expected_prev )
		&& ((LNF_expected_prev !== last_LNF_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LNF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LNF_expected_prev);
		$display ("     Real value = %b", LNF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_LNF_exp = LNF_expected_prev;
	end
	if (
		( LNL_expected_prev !== 1'bx ) && ( LNL_prev !== LNL_expected_prev )
		&& ((LNL_expected_prev !== last_LNL_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LNL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LNL_expected_prev);
		$display ("     Real value = %b", LNL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_LNL_exp = LNL_expected_prev;
	end
	if (
		( LNR_expected_prev !== 1'bx ) && ( LNR_prev !== LNR_expected_prev )
		&& ((LNR_expected_prev !== last_LNR_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LNR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LNR_expected_prev);
		$display ("     Real value = %b", LNR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_LNR_exp = LNR_expected_prev;
	end
	if (
		( LSF_expected_prev !== 1'bx ) && ( LSF_prev !== LSF_expected_prev )
		&& ((LSF_expected_prev !== last_LSF_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSF_expected_prev);
		$display ("     Real value = %b", LSF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_LSF_exp = LSF_expected_prev;
	end
	if (
		( LSL_expected_prev !== 1'bx ) && ( LSL_prev !== LSL_expected_prev )
		&& ((LSL_expected_prev !== last_LSL_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSL_expected_prev);
		$display ("     Real value = %b", LSL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_LSL_exp = LSL_expected_prev;
	end
	if (
		( LSR_expected_prev !== 1'bx ) && ( LSR_prev !== LSR_expected_prev )
		&& ((LSR_expected_prev !== last_LSR_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSR_expected_prev);
		$display ("     Real value = %b", LSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_LSR_exp = LSR_expected_prev;
	end
	if (
		( LWA_expected_prev !== 1'bx ) && ( LWA_prev !== LWA_expected_prev )
		&& ((LWA_expected_prev !== last_LWA_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LWA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LWA_expected_prev);
		$display ("     Real value = %b", LWA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_LWA_exp = LWA_expected_prev;
	end
	if (
		( s_expected_prev[0] !== 1'bx ) && ( s_prev[0] !== s_expected_prev[0] )
		&& ((s_expected_prev[0] !== last_s_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s_exp[0] = s_expected_prev[0];
	end
	if (
		( s_expected_prev[1] !== 1'bx ) && ( s_prev[1] !== s_expected_prev[1] )
		&& ((s_expected_prev[1] !== last_s_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s_exp[1] = s_expected_prev[1];
	end
	if (
		( s_expected_prev[2] !== 1'bx ) && ( s_prev[2] !== s_expected_prev[2] )
		&& ((s_expected_prev[2] !== last_s_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s_exp[2] = s_expected_prev[2];
	end
	if (
		( s_expected_prev[3] !== 1'bx ) && ( s_prev[3] !== s_expected_prev[3] )
		&& ((s_expected_prev[3] !== last_s_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port s[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", s_expected_prev);
		$display ("     Real value = %b", s_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_s_exp[3] = s_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module traffic_control_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg se1;
reg sw2;
reg tco;
// wires                                               
wire LEA;
wire LNF;
wire LNL;
wire LNR;
wire LSF;
wire LSL;
wire LSR;
wire LWA;
wire [3:0] s;

wire sampler;                             

// assign statements (if any)                          
traffic_control i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.LEA(LEA),
	.LNF(LNF),
	.LNL(LNL),
	.LNR(LNR),
	.LSF(LSF),
	.LSL(LSL),
	.LSR(LSR),
	.LWA(LWA),
	.reset(reset),
	.s(s),
	.se1(se1),
	.sw2(sw2),
	.tco(tco)
);

// se1
initial
begin
	se1 = 1'b0;
	se1 = #80000 1'b1;
	se1 = #80000 1'b0;
	se1 = #280000 1'b1;
	se1 = #40000 1'b0;
end 

// sw2
initial
begin
	sw2 = 1'b0;
	sw2 = #160000 1'b1;
	sw2 = #80000 1'b0;
	sw2 = #200000 1'b1;
	sw2 = #40000 1'b0;
	sw2 = #160000 1'b1;
	sw2 = #80000 1'b0;
end 

// tco
initial
begin
	repeat(12)
	begin
		tco = 1'b0;
		tco = #40000 1'b1;
		# 40000;
	end
	tco = 1'b0;
end 

// clk
initial
begin
	clk = 1'b1;
	clk = #10000 1'b0;
	# 10000;
	repeat(48)
	begin
		clk = 1'b1;
		clk = #10000 1'b0;
		# 10000;
	end
	clk = 1'b1;
	clk = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

traffic_control_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.se1(se1),
	.sw2(sw2),
	.tco(tco),
	.sampler_tx(sampler)
);

traffic_control_vlg_check_tst tb_out(
	.LEA(LEA),
	.LNF(LNF),
	.LNL(LNL),
	.LNR(LNR),
	.LSF(LSF),
	.LSL(LSL),
	.LSR(LSR),
	.LWA(LWA),
	.s(s),
	.sampler_rx(sampler)
);
endmodule

