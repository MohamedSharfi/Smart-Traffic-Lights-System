// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/13/2023 14:19:00"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    firstweekprelab
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module firstweekprelab_vlg_sample_tst(
	high,
	pin_name1,
	reset,
	sampler_tx
);
input  high;
input  pin_name1;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(high or pin_name1 or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module firstweekprelab_vlg_check_tst (
	a,
	Aa,
	b,
	Bb,
	c,
	Cc,
	d,
	Dd,
	e,
	f,
	g,
	sampler_rx
);
input  a;
input  Aa;
input  b;
input  Bb;
input  c;
input  Cc;
input  d;
input  Dd;
input  e;
input  f;
input  g;
input sampler_rx;

reg  a_expected;
reg  Aa_expected;
reg  b_expected;
reg  Bb_expected;
reg  c_expected;
reg  Cc_expected;
reg  d_expected;
reg  Dd_expected;
reg  e_expected;
reg  f_expected;
reg  g_expected;

reg  a_prev;
reg  Aa_prev;
reg  b_prev;
reg  Bb_prev;
reg  c_prev;
reg  Cc_prev;
reg  d_prev;
reg  Dd_prev;
reg  e_prev;
reg  f_prev;
reg  g_prev;

reg  a_expected_prev;
reg  Aa_expected_prev;
reg  b_expected_prev;
reg  Bb_expected_prev;
reg  c_expected_prev;
reg  Cc_expected_prev;
reg  d_expected_prev;
reg  Dd_expected_prev;
reg  e_expected_prev;
reg  f_expected_prev;
reg  g_expected_prev;

reg  last_a_exp;
reg  last_Aa_exp;
reg  last_b_exp;
reg  last_Bb_exp;
reg  last_c_exp;
reg  last_Cc_exp;
reg  last_d_exp;
reg  last_Dd_exp;
reg  last_e_exp;
reg  last_f_exp;
reg  last_g_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:11] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 11'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	Aa_prev = Aa;
	b_prev = b;
	Bb_prev = Bb;
	c_prev = c;
	Cc_prev = Cc;
	d_prev = d;
	Dd_prev = Dd;
	e_prev = e;
	f_prev = f;
	g_prev = g;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	Aa_expected_prev = Aa_expected;
	b_expected_prev = b_expected;
	Bb_expected_prev = Bb_expected;
	c_expected_prev = c_expected;
	Cc_expected_prev = Cc_expected;
	d_expected_prev = d_expected;
	Dd_expected_prev = Dd_expected;
	e_expected_prev = e_expected;
	f_expected_prev = f_expected;
	g_expected_prev = g_expected;
end



// expected Aa
initial
begin
	Aa_expected = 1'bX;
end 

// expected Bb
initial
begin
	Bb_expected = 1'bX;
end 

// expected Cc
initial
begin
	Cc_expected = 1'bX;
end 

// expected Dd
initial
begin
	Dd_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 

// expected a
initial
begin
	a_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or Aa_expected or Aa or b_expected or b or Bb_expected or Bb or c_expected or c or Cc_expected or Cc or d_expected or d or Dd_expected or Dd or e_expected or e or f_expected or f or g_expected or g)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected Aa = %b | expected b = %b | expected Bb = %b | expected c = %b | expected Cc = %b | expected d = %b | expected Dd = %b | expected e = %b | expected f = %b | expected g = %b | ",a_expected_prev,Aa_expected_prev,b_expected_prev,Bb_expected_prev,c_expected_prev,Cc_expected_prev,d_expected_prev,Dd_expected_prev,e_expected_prev,f_expected_prev,g_expected_prev);
	$display("| real a = %b | real Aa = %b | real b = %b | real Bb = %b | real c = %b | real Cc = %b | real d = %b | real Dd = %b | real e = %b | real f = %b | real g = %b | ",a_prev,Aa_prev,b_prev,Bb_prev,c_prev,Cc_prev,d_prev,Dd_prev,e_prev,f_prev,g_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( Aa_expected_prev !== 1'bx ) && ( Aa_prev !== Aa_expected_prev )
		&& ((Aa_expected_prev !== last_Aa_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Aa :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Aa_expected_prev);
		$display ("     Real value = %b", Aa_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Aa_exp = Aa_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( Bb_expected_prev !== 1'bx ) && ( Bb_prev !== Bb_expected_prev )
		&& ((Bb_expected_prev !== last_Bb_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Bb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Bb_expected_prev);
		$display ("     Real value = %b", Bb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Bb_exp = Bb_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( Cc_expected_prev !== 1'bx ) && ( Cc_prev !== Cc_expected_prev )
		&& ((Cc_expected_prev !== last_Cc_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cc :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cc_expected_prev);
		$display ("     Real value = %b", Cc_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Cc_exp = Cc_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( Dd_expected_prev !== 1'bx ) && ( Dd_prev !== Dd_expected_prev )
		&& ((Dd_expected_prev !== last_Dd_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Dd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Dd_expected_prev);
		$display ("     Real value = %b", Dd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_Dd_exp = Dd_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_g_exp = g_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module firstweekprelab_vlg_vec_tst();
// constants                                           
// general purpose registers
reg high;
reg pin_name1;
reg reset;
// wires                                               
wire a;
wire Aa;
wire b;
wire Bb;
wire c;
wire Cc;
wire d;
wire Dd;
wire e;
wire f;
wire g;

wire sampler;                             

// assign statements (if any)                          
firstweekprelab i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.Aa(Aa),
	.b(b),
	.Bb(Bb),
	.c(c),
	.Cc(Cc),
	.d(d),
	.Dd(Dd),
	.e(e),
	.f(f),
	.g(g),
	.high(high),
	.pin_name1(pin_name1),
	.reset(reset)
);

// high
initial
begin
	high = 1'b1;
end 

// reset
initial
begin
	reset = 1'b1;
	reset = #50000 1'b0;
end 

// pin_name1
always
begin
	pin_name1 = 1'b0;
	pin_name1 = #20000 1'b1;
	#20000;
end 

firstweekprelab_vlg_sample_tst tb_sample (
	.high(high),
	.pin_name1(pin_name1),
	.reset(reset),
	.sampler_tx(sampler)
);

firstweekprelab_vlg_check_tst tb_out(
	.a(a),
	.Aa(Aa),
	.b(b),
	.Bb(Bb),
	.c(c),
	.Cc(Cc),
	.d(d),
	.Dd(Dd),
	.e(e),
	.f(f),
	.g(g),
	.sampler_rx(sampler)
);
endmodule

