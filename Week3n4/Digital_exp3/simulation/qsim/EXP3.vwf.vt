// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/19/2023 15:51:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    exp3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp3_vlg_sample_tst(
	clk,
	SE1,
	SW2,
	sampler_tx
);
input  clk;
input  SE1;
input  SW2;
output sampler_tx;

reg sample;
time current_time;
always @(clk or SE1 or SW2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module exp3_vlg_check_tst (
	A,
	B,
	C,
	count,
	D,
	E,
	F,
	G,
	LEA,
	LNF,
	LNL,
	LNR,
	LSE,
	LSL,
	LSR,
	LWA,
	state,
	TCO,
	sampler_rx
);
input  A;
input  B;
input  C;
input [3:0] count;
input  D;
input  E;
input  F;
input  G;
input  LEA;
input  LNF;
input  LNL;
input  LNR;
input  LSE;
input  LSL;
input  LSR;
input  LWA;
input [3:0] state;
input  TCO;
input sampler_rx;

reg  A_expected;
reg  B_expected;
reg  C_expected;
reg [3:0] count_expected;
reg  D_expected;
reg  E_expected;
reg  F_expected;
reg  G_expected;
reg  LEA_expected;
reg  LNF_expected;
reg  LNL_expected;
reg  LNR_expected;
reg  LSE_expected;
reg  LSL_expected;
reg  LSR_expected;
reg  LWA_expected;
reg [3:0] state_expected;
reg  TCO_expected;

reg  A_prev;
reg  B_prev;
reg  C_prev;
reg [3:0] count_prev;
reg  D_prev;
reg  E_prev;
reg  F_prev;
reg  G_prev;
reg  LEA_prev;
reg  LNF_prev;
reg  LNL_prev;
reg  LNR_prev;
reg  LSE_prev;
reg  LSL_prev;
reg  LSR_prev;
reg  LWA_prev;
reg [3:0] state_prev;
reg  TCO_prev;

reg  A_expected_prev;
reg  B_expected_prev;
reg  C_expected_prev;
reg [3:0] count_expected_prev;
reg  D_expected_prev;
reg  E_expected_prev;
reg  F_expected_prev;
reg  G_expected_prev;
reg  LEA_expected_prev;
reg  LNF_expected_prev;
reg  LNL_expected_prev;
reg  LNR_expected_prev;
reg  LSE_expected_prev;
reg  LSL_expected_prev;
reg  LSR_expected_prev;
reg  LWA_expected_prev;
reg [3:0] state_expected_prev;
reg  TCO_expected_prev;

reg  last_A_exp;
reg  last_B_exp;
reg  last_C_exp;
reg [3:0] last_count_exp;
reg  last_D_exp;
reg  last_E_exp;
reg  last_F_exp;
reg  last_G_exp;
reg  last_LEA_exp;
reg  last_LNF_exp;
reg  last_LNL_exp;
reg  last_LNR_exp;
reg  last_LSE_exp;
reg  last_LSL_exp;
reg  last_LSR_exp;
reg  last_LWA_exp;
reg [3:0] last_state_exp;
reg  last_TCO_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:18] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 18'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	C_prev = C;
	count_prev = count;
	D_prev = D;
	E_prev = E;
	F_prev = F;
	G_prev = G;
	LEA_prev = LEA;
	LNF_prev = LNF;
	LNL_prev = LNL;
	LNR_prev = LNR;
	LSE_prev = LSE;
	LSL_prev = LSL;
	LSR_prev = LSR;
	LWA_prev = LWA;
	state_prev = state;
	TCO_prev = TCO;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	C_expected_prev = C_expected;
	count_expected_prev = count_expected;
	D_expected_prev = D_expected;
	E_expected_prev = E_expected;
	F_expected_prev = F_expected;
	G_expected_prev = G_expected;
	LEA_expected_prev = LEA_expected;
	LNF_expected_prev = LNF_expected;
	LNL_expected_prev = LNL_expected;
	LNR_expected_prev = LNR_expected;
	LSE_expected_prev = LSE_expected;
	LSL_expected_prev = LSL_expected;
	LSR_expected_prev = LSR_expected;
	LWA_expected_prev = LWA_expected;
	state_expected_prev = state_expected;
	TCO_expected_prev = TCO_expected;
end



// expected A
initial
begin
	A_expected = 1'bX;
end 

// expected B
initial
begin
	B_expected = 1'bX;
end 

// expected C
initial
begin
	C_expected = 1'bX;
end 

// expected D
initial
begin
	D_expected = 1'bX;
end 

// expected E
initial
begin
	E_expected = 1'bX;
end 

// expected F
initial
begin
	F_expected = 1'bX;
end 

// expected G
initial
begin
	G_expected = 1'bX;
end 

// expected LEA
initial
begin
	LEA_expected = 1'bX;
end 

// expected LNF
initial
begin
	LNF_expected = 1'bX;
end 

// expected LNL
initial
begin
	LNL_expected = 1'bX;
end 

// expected LNR
initial
begin
	LNR_expected = 1'bX;
end 

// expected LSE
initial
begin
	LSE_expected = 1'bX;
end 

// expected LSL
initial
begin
	LSL_expected = 1'bX;
end 

// expected LSR
initial
begin
	LSR_expected = 1'bX;
end 

// expected LWA
initial
begin
	LWA_expected = 1'bX;
end 

// expected TCO
initial
begin
	TCO_expected = 1'bX;
end 
// expected count[ 3 ]
initial
begin
	count_expected[3] = 1'bX;
end 
// expected count[ 2 ]
initial
begin
	count_expected[2] = 1'bX;
end 
// expected count[ 1 ]
initial
begin
	count_expected[1] = 1'bX;
end 
// expected count[ 0 ]
initial
begin
	count_expected[0] = 1'bX;
end 
// expected state[ 3 ]
initial
begin
	state_expected[3] = 1'bX;
end 
// expected state[ 2 ]
initial
begin
	state_expected[2] = 1'bX;
end 
// expected state[ 1 ]
initial
begin
	state_expected[1] = 1'bX;
end 
// expected state[ 0 ]
initial
begin
	state_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or C_expected or C or count_expected or count or D_expected or D or E_expected or E or F_expected or F or G_expected or G or LEA_expected or LEA or LNF_expected or LNF or LNL_expected or LNL or LNR_expected or LNR or LSE_expected or LSE or LSL_expected or LSL or LSR_expected or LSR or LWA_expected or LWA or state_expected or state or TCO_expected or TCO)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected C = %b | expected count = %b | expected D = %b | expected E = %b | expected F = %b | expected G = %b | expected LEA = %b | expected LNF = %b | expected LNL = %b | expected LNR = %b | expected LSE = %b | expected LSL = %b | expected LSR = %b | expected LWA = %b | expected state = %b | expected TCO = %b | ",A_expected_prev,B_expected_prev,C_expected_prev,count_expected_prev,D_expected_prev,E_expected_prev,F_expected_prev,G_expected_prev,LEA_expected_prev,LNF_expected_prev,LNL_expected_prev,LNR_expected_prev,LSE_expected_prev,LSL_expected_prev,LSR_expected_prev,LWA_expected_prev,state_expected_prev,TCO_expected_prev);
	$display("| real A = %b | real B = %b | real C = %b | real count = %b | real D = %b | real E = %b | real F = %b | real G = %b | real LEA = %b | real LNF = %b | real LNL = %b | real LNR = %b | real LSE = %b | real LSL = %b | real LSR = %b | real LWA = %b | real state = %b | real TCO = %b | ",A_prev,B_prev,C_prev,count_prev,D_prev,E_prev,F_prev,G_prev,LEA_prev,LNF_prev,LNL_prev,LNR_prev,LSE_prev,LSL_prev,LSR_prev,LWA_prev,state_prev,TCO_prev);
`endif
	if (
		( A_expected_prev !== 1'bx ) && ( A_prev !== A_expected_prev )
		&& ((A_expected_prev !== last_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp = A_expected_prev;
	end
	if (
		( B_expected_prev !== 1'bx ) && ( B_prev !== B_expected_prev )
		&& ((B_expected_prev !== last_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp = B_expected_prev;
	end
	if (
		( C_expected_prev !== 1'bx ) && ( C_prev !== C_expected_prev )
		&& ((C_expected_prev !== last_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_expected_prev);
		$display ("     Real value = %b", C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_exp = C_expected_prev;
	end
	if (
		( count_expected_prev[0] !== 1'bx ) && ( count_prev[0] !== count_expected_prev[0] )
		&& ((count_expected_prev[0] !== last_count_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[0] = count_expected_prev[0];
	end
	if (
		( count_expected_prev[1] !== 1'bx ) && ( count_prev[1] !== count_expected_prev[1] )
		&& ((count_expected_prev[1] !== last_count_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[1] = count_expected_prev[1];
	end
	if (
		( count_expected_prev[2] !== 1'bx ) && ( count_prev[2] !== count_expected_prev[2] )
		&& ((count_expected_prev[2] !== last_count_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[2] = count_expected_prev[2];
	end
	if (
		( count_expected_prev[3] !== 1'bx ) && ( count_prev[3] !== count_expected_prev[3] )
		&& ((count_expected_prev[3] !== last_count_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port count[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", count_expected_prev);
		$display ("     Real value = %b", count_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_count_exp[3] = count_expected_prev[3];
	end
	if (
		( D_expected_prev !== 1'bx ) && ( D_prev !== D_expected_prev )
		&& ((D_expected_prev !== last_D_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_expected_prev);
		$display ("     Real value = %b", D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_exp = D_expected_prev;
	end
	if (
		( E_expected_prev !== 1'bx ) && ( E_prev !== E_expected_prev )
		&& ((E_expected_prev !== last_E_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_E_exp = E_expected_prev;
	end
	if (
		( F_expected_prev !== 1'bx ) && ( F_prev !== F_expected_prev )
		&& ((F_expected_prev !== last_F_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_expected_prev);
		$display ("     Real value = %b", F_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_F_exp = F_expected_prev;
	end
	if (
		( G_expected_prev !== 1'bx ) && ( G_prev !== G_expected_prev )
		&& ((G_expected_prev !== last_G_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_expected_prev);
		$display ("     Real value = %b", G_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_G_exp = G_expected_prev;
	end
	if (
		( LEA_expected_prev !== 1'bx ) && ( LEA_prev !== LEA_expected_prev )
		&& ((LEA_expected_prev !== last_LEA_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LEA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LEA_expected_prev);
		$display ("     Real value = %b", LEA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_LEA_exp = LEA_expected_prev;
	end
	if (
		( LNF_expected_prev !== 1'bx ) && ( LNF_prev !== LNF_expected_prev )
		&& ((LNF_expected_prev !== last_LNF_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LNF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LNF_expected_prev);
		$display ("     Real value = %b", LNF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_LNF_exp = LNF_expected_prev;
	end
	if (
		( LNL_expected_prev !== 1'bx ) && ( LNL_prev !== LNL_expected_prev )
		&& ((LNL_expected_prev !== last_LNL_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LNL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LNL_expected_prev);
		$display ("     Real value = %b", LNL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_LNL_exp = LNL_expected_prev;
	end
	if (
		( LNR_expected_prev !== 1'bx ) && ( LNR_prev !== LNR_expected_prev )
		&& ((LNR_expected_prev !== last_LNR_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LNR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LNR_expected_prev);
		$display ("     Real value = %b", LNR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_LNR_exp = LNR_expected_prev;
	end
	if (
		( LSE_expected_prev !== 1'bx ) && ( LSE_prev !== LSE_expected_prev )
		&& ((LSE_expected_prev !== last_LSE_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSE :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSE_expected_prev);
		$display ("     Real value = %b", LSE_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_LSE_exp = LSE_expected_prev;
	end
	if (
		( LSL_expected_prev !== 1'bx ) && ( LSL_prev !== LSL_expected_prev )
		&& ((LSL_expected_prev !== last_LSL_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSL :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSL_expected_prev);
		$display ("     Real value = %b", LSL_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_LSL_exp = LSL_expected_prev;
	end
	if (
		( LSR_expected_prev !== 1'bx ) && ( LSR_prev !== LSR_expected_prev )
		&& ((LSR_expected_prev !== last_LSR_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LSR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LSR_expected_prev);
		$display ("     Real value = %b", LSR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_LSR_exp = LSR_expected_prev;
	end
	if (
		( LWA_expected_prev !== 1'bx ) && ( LWA_prev !== LWA_expected_prev )
		&& ((LWA_expected_prev !== last_LWA_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port LWA :: @time = %t",  $realtime);
		$display ("     Expected value = %b", LWA_expected_prev);
		$display ("     Real value = %b", LWA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_LWA_exp = LWA_expected_prev;
	end
	if (
		( state_expected_prev[0] !== 1'bx ) && ( state_prev[0] !== state_expected_prev[0] )
		&& ((state_expected_prev[0] !== last_state_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_state_exp[0] = state_expected_prev[0];
	end
	if (
		( state_expected_prev[1] !== 1'bx ) && ( state_prev[1] !== state_expected_prev[1] )
		&& ((state_expected_prev[1] !== last_state_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_state_exp[1] = state_expected_prev[1];
	end
	if (
		( state_expected_prev[2] !== 1'bx ) && ( state_prev[2] !== state_expected_prev[2] )
		&& ((state_expected_prev[2] !== last_state_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_state_exp[2] = state_expected_prev[2];
	end
	if (
		( state_expected_prev[3] !== 1'bx ) && ( state_prev[3] !== state_expected_prev[3] )
		&& ((state_expected_prev[3] !== last_state_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_expected_prev);
		$display ("     Real value = %b", state_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_state_exp[3] = state_expected_prev[3];
	end
	if (
		( TCO_expected_prev !== 1'bx ) && ( TCO_prev !== TCO_expected_prev )
		&& ((TCO_expected_prev !== last_TCO_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port TCO :: @time = %t",  $realtime);
		$display ("     Expected value = %b", TCO_expected_prev);
		$display ("     Real value = %b", TCO_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_TCO_exp = TCO_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module exp3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg SE1;
reg SW2;
// wires                                               
wire A;
wire B;
wire C;
wire [3:0] count;
wire D;
wire E;
wire F;
wire G;
wire LEA;
wire LNF;
wire LNL;
wire LNR;
wire LSE;
wire LSL;
wire LSR;
wire LWA;
wire [3:0] state;
wire TCO;

wire sampler;                             

// assign statements (if any)                          
exp3 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.clk(clk),
	.count(count),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.LEA(LEA),
	.LNF(LNF),
	.LNL(LNL),
	.LNR(LNR),
	.LSE(LSE),
	.LSL(LSL),
	.LSR(LSR),
	.LWA(LWA),
	.SE1(SE1),
	.state(state),
	.SW2(SW2),
	.TCO(TCO)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// SE1
initial
begin
	SE1 = 1'b0;
	SE1 = #50000 1'b1;
	SE1 = #20000 1'b0;
	SE1 = #120000 1'b1;
	SE1 = #30000 1'b0;
	SE1 = #30000 1'b1;
	SE1 = #20000 1'b0;
	SE1 = #180000 1'b1;
	SE1 = #40000 1'b0;
	SE1 = #100000 1'b1;
	SE1 = #40000 1'b0;
end 

// SW2
initial
begin
	SW2 = 1'b0;
	SW2 = #70000 1'b1;
	SW2 = #20000 1'b0;
	SW2 = #60000 1'b1;
	SW2 = #10000 1'b0;
	SW2 = #90000 1'b1;
	SW2 = #30000 1'b0;
	SW2 = #20000 1'b1;
	SW2 = #40000 1'b0;
	SW2 = #130000 1'b1;
	SW2 = #50000 1'b0;
	SW2 = #70000 1'b1;
	SW2 = #160000 1'b0;
end 

exp3_vlg_sample_tst tb_sample (
	.clk(clk),
	.SE1(SE1),
	.SW2(SW2),
	.sampler_tx(sampler)
);

exp3_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.C(C),
	.count(count),
	.D(D),
	.E(E),
	.F(F),
	.G(G),
	.LEA(LEA),
	.LNF(LNF),
	.LNL(LNL),
	.LNR(LNR),
	.LSE(LSE),
	.LSL(LSL),
	.LSR(LSR),
	.LWA(LWA),
	.state(state),
	.TCO(TCO),
	.sampler_rx(sampler)
);
endmodule

